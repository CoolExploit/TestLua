-- UI Library Module
local UI = {}

-- Function to create a new Frame
-- Params:
-- title: The title of the frame (optional)
-- size: A Vector2 representing the size of the frame
-- position: A Vector2 representing the position of the frame
-- content: The text/content inside the frame (optional)
function UI:CreateFrame(title, size, position, content)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, size.X, 0, size.Y)
    -- Position the frame in the center of the screen
    frame.Position = position or UDim2.new(0.5, -size.X / 2, 0.5, -size.Y / 2)
    frame.BackgroundColor3 = Color3.fromRGB(34, 34, 34)  -- Dark gray background
    frame.BorderSizePixel = 0
    frame.Visible = true
    frame.AnchorPoint = Vector2.new(0.5, 0.5)  -- Anchor at center for better positioning

    -- Adding rounded corners
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 12)  -- Rounded corners with a radius of 12 pixels
    UICorner.Parent = frame

    -- Adding a subtle shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Size = UDim2.new(1, 6, 1, 6)  -- Slightly larger than the frame for shadow effect
    shadow.Position = UDim2.new(0, -3, 0, -3)
    shadow.Image = "rbxassetid://301164276"  -- Predefined shadow image
    shadow.BackgroundTransparency = 1
    shadow.ImageTransparency = 0.4  -- Slight transparency for shadow effect
    shadow.ZIndex = -1  -- Placed behind the frame
    shadow.Parent = frame

    -- Add a title if provided
    if title then
        local titleLabel = Instance.new("TextLabel")
        titleLabel.Text = title
        titleLabel.Size = UDim2.new(1, 0, 0, 30)
        titleLabel.BackgroundTransparency = 1
        titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        titleLabel.TextSize = 20
        titleLabel.TextAlign = Enum.TextXAlignment.Center
        titleLabel.Font = Enum.Font.GothamBold
        titleLabel.Parent = frame
    end

    -- Add content if provided
    if content then
        local contentLabel = Instance.new("TextLabel")
        contentLabel.Text = content
        contentLabel.Size = UDim2.new(1, 0, 0, 60)
        contentLabel.Position = UDim2.new(0, 0, 0, 30)
        contentLabel.BackgroundTransparency = 1
        contentLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        contentLabel.TextSize = 14
        contentLabel.TextAlign = Enum.TextXAlignment.Center
        contentLabel.Font = Enum.Font.Gotham
        contentLabel.Parent = frame
    end

    return frame
end

-- Function to create a Toggle button (e.g., On/Off switch)
-- Params:
-- parent: The frame to place the toggle in
-- label: The text label on the toggle
-- defaultState: The default state of the toggle (true/false)
-- callback: The function to call when the toggle state changes
function UI:CreateToggle(parent, label, defaultState, callback)
    local toggle = Instance.new("TextButton")
    toggle.Size = UDim2.new(0, 200, 0, 50)
    toggle.Text = label
    toggle.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggle.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    toggle.Parent = parent
    toggle.AutoButtonColor = false

    -- Adding rounded corners to the button
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = toggle

    local isOn = defaultState or false
    toggle.Text = label .. ": " .. (isOn and "On" or "Off")

    toggle.MouseButton1Click:Connect(function()
        isOn = not isOn
        toggle.Text = label .. ": " .. (isOn and "On" or "Off")
        callback(isOn)
    end)

    return toggle
end

-- Function to create a Slider
-- Params:
-- parent: The frame to place the slider in
-- minValue: The minimum value of the slider
-- maxValue: The maximum value of the slider
-- defaultValue: The default value (optional)
-- callback: The function to call with the slider value
function UI:CreateSlider(parent, minValue, maxValue, defaultValue, callback)
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Size = UDim2.new(0, 300, 0, 50)
    sliderFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    sliderFrame.Parent = parent

    -- Adding rounded corners to the slider frame
    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 8)
    UICorner.Parent = sliderFrame

    local sliderBar = Instance.new("Frame")
    sliderBar.Size = UDim2.new(1, 0, 0, 5)
    sliderBar.Position = UDim2.new(0, 0, 0, 22)
    sliderBar.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    sliderBar.Parent = sliderFrame

    local knob = Instance.new("Frame")
    knob.Size = UDim2.new(0, 10, 0, 10)
    knob.Position = UDim2.new(0, (defaultValue - minValue) / (maxValue - minValue) * 290, 0, -2)
    knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    knob.Parent = sliderBar

    knob.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mouse = game:GetService("Players").LocalPlayer:GetMouse()
            local function moveKnob()
                local pos = mouse.X - sliderBar.AbsolutePosition.X
                pos = math.clamp(pos, 0, 290)
                knob.Position = UDim2.new(0, pos, 0, -2)

                local value = math.floor((pos / 290) * (maxValue - minValue) + minValue)
                callback(value)
            end

            game:GetService("UserInputService").InputChanged:Connect(moveKnob)
        end
    end)

    return sliderFrame
end

-- Function to enable draggable behavior for a frame
-- Params:
-- frame: The frame to make draggable
function UI:EnableDraggable(frame)
    local dragging = false
    local dragInput, dragStart, startPos

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if dragging == false then return end
                local delta = input.Position - dragStart
                frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end)
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
end

-- Return the UI library for use
return UI
